generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum type_user {
  admin
  user
}

enum type_phone {
  casa
  trabalho
  celular
}

enum type_address {
  casa
  trabalho
}

enum type_game_status {
  playing
  played
  whishlist
}

model tb_user {
  id           Int               @id @default(autoincrement())
  name         String
  email        String            @unique
  cpf          String            @unique
  age          Int
  password     String
  lostPassword  String?
  phones       tb_phone[]
  addresses    tb_address[]
  lists        tb_list[]
  played_games tb_played_games[]
  tips         tb_tips[]
  type         type_user         @default(user)
  created_at   DateTime          @default(now())
  updated_at   DateTime          @updatedAt
  deleted_at   DateTime?
}

model tb_phone {
  id           Int        @id @default(autoincrement())
  country_code String
  area_code    String
  phone        String
  type         type_phone
  user_id      Int
  user         tb_user    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  deleted_at   DateTime?
}

model tb_address {
  id           Int          @id @default(autoincrement())
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  country      String
  type         type_address
  user_id      Int
  user         tb_user      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  deleted_at   DateTime?
}

model tb_list {
  id          Int            @id @default(autoincrement())
  name        String         @db.VarChar(100)
  description String?        @db.VarChar(150)
  game_list   tb_game_list[]
  user_id     Int
  user        tb_user        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt
  deleted_at  DateTime?
}

model tb_game_list {
  id         Int       @id @default(autoincrement())
  list_id    Int
  list       tb_list   @relation(fields: [list_id], references: [id], onDelete: Cascade)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model tb_played_games {
  id           Int              @id @default(autoincrement())
  platinum     Boolean         @default(false)
  achievements String           @db.Text
  status       type_game_status
  game_id      Int
  user_id      Int
  user         tb_user          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at   DateTime         @default(now())
  updated_at   DateTime         @updatedAt
  deleted_at   DateTime?
}

model tb_tips {
  id          Int       @id @default(autoincrement())
  subject     String    @db.VarChar(100)
  description String    @db.Text
  likes       Int
  dislikes    Int
  game_id     Int
  user_id     Int
  user        tb_user   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?
}
